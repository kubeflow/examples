apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: blue-book-for-bulldozers-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.2, pipelines.kubeflow.org/pipeline_compilation_time: '2022-06-17T10:05:35.793011',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "pipeline to run blue book
      for bulldozers", "name": "blue book for bulldozers"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.1.2}
spec:
  entrypoint: blue-book-for-bulldozers
  templates:
  - name: blue-book-for-bulldozers
    dag:
      tasks:
      - name: preprocess
        template: preprocess
        dependencies: [pvc]
        arguments:
          parameters:
          - {name: pvc-name, value: '{{tasks.pvc.outputs.parameters.pvc-name}}'}
      - {name: pvc, template: pvc}
      - name: train
        template: train
        dependencies: [preprocess, pvc]
        arguments:
          parameters:
          - {name: pvc-name, value: '{{tasks.pvc.outputs.parameters.pvc-name}}'}
  - name: preprocess
    container:
      command: [python3, preprocess.py]
      image: hubdocker76/telco-preprocess:v2
      volumeMounts:
      - {mountPath: /data, name: pvc}
    inputs:
      parameters:
      - {name: pvc-name}
    volumes:
    - name: pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.pvc-name}}'}
  - name: pvc
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-pvc'
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    outputs:
      parameters:
      - name: pvc-manifest
        valueFrom: {jsonPath: '{}'}
      - name: pvc-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: pvc-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
  - name: train
    container:
      command: [python3, train.py]
      image: hubdocker76/telco-train:v4
      volumeMounts:
      - {mountPath: /data, name: pvc}
    inputs:
      parameters:
      - {name: pvc-name}
    volumes:
    - name: pvc
      persistentVolumeClaim: {claimName: '{{inputs.parameters.pvc-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
