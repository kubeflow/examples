#!/bin/bash
#
# This script creates a PR updating the nmslib index used by search-index-server.
# It uses ks CLI to update the parameters.
# After creating and pushing a commit it uses the hub github CLI to create a PR.
#
# The argument --base can be used to change the owner/org of the repo the PR is opened on.
# To use the main kubeflow/examples repo use 
# --base=kubeflow:master
#
# To use user alex's fork use
# --base=alex/master
set -ex

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"

parseArgs() {
  # Parse all command line options
  while [[ $# -gt 0 ]]; do
    # Parameters should be of the form
    # --{name}=${value}
    echo parsing "$1"
    if [[ $1 =~ ^--(.*)=(.*)$ ]]; then
    	name=${BASH_REMATCH[1]}
    	value=${BASH_REMATCH[2]}

    	eval ${name}="${value}"
    elif [[ $1 =~ ^--(.*)$ ]]; then
		name=${BASH_REMATCH[1]}
		value=true
		eval ${name}="${value}"
    else
    	echo "Argument $1 did not match the pattern --{name}={value} or --{name}"
    fi
    shift
  done
}

usage() {
	echo "Usage: update_index.sh --base=OWNER:branch --appDir=<ksonnet app dir> --env=<ksonnet environment> --indexFile=<index file> --lookupFile=<lookup file>"
}

parseArgs $*

if [ ! -z ${help} ]; then
	usage
fi

if [ -z ${dryrun} ]; then
	dryrun=false
fi

# List of required parameters
names=(appDir env lookupFile indexFile base)


missingParam=false
for i in ${names[@]}; do
	if [ -z ${!i} ]; then
		echo "--${i} not set"
		missingParam=true		
	fi	
done

if ${missingParam}; then
	usage
	exit 1
fi
cd ${appDir}
ks param set --env=${env} search-index-server indexFile ${indexFile}
ks param set --env=${env} search-index-server lookupFile ${lookupFile}
git add .

if (! ${dryrun}); then
	git commit -m "Update the lookup and index file."
	git push
else
	echo "dryrun; not committing to git."
fi

FILE=$(mktemp tmp.create_pull_request.XXXX)

cat <<EOF >$FILE
Update the lookup and index file.

This PR is automatically generated by update_index.sh.

This PR updates the index and lookup file used to serve
predictions.
EOF

# Create a pull request
if (! ${dryrun}); then
hub pull-request --base=${base} -F ${FILE}
fi
