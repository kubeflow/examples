const util = require('util');
const snippets = require('../snippets');
const fs = require("fs");

module.exports = function(RED) {
    function Dataprocedures(config) {
        RED.nodes.createNode(this, config);
        const node = this;

        node.on('input', function(msg) {
            const scriptComponents = assembleScript(config, msg);
            msg.payload += scriptComponents.script;
            msg.fill_na = scriptComponents.fill_na;
            msg.labelencoding = scriptComponents.labelencoding;
            msg.onehotencoding = scriptComponents.onehotencoding;
            msg.featurescaling = scriptComponents.featurescaling;
            msg.datareshape = scriptComponents.datareshape;
            node.send(msg);
        });
    }
    
    function assembleScript(config, msg) {
        const {
            fillna_requirement, fillna, fillnavalue, 
            labelencoding_requirement, labelencoding_column_name, 
            onehotencoding_requirement, onehotencoding_column_name, 
            feature_scaling_requirement, feature_scaling, 
            data_reshape, height, width, channel
        } = config;
        
        const fill_na = fillna_requirement
            ? (fillna === "fill_na_by_value"
                ? util.format(snippets.FILLNANBYVALUE, msg.label, msg.col_names, fillnavalue)
                : fillna === "fill_na_by_mean"
                ? util.format(snippets.FILLNANBYMEAN, msg.label, msg.col_names)
                : util.format(snippets.FILLNANBYMEDIAN, msg.label, msg.col_names))
            : "";

        const labelencoding = labelencoding_requirement
            ? util.format(snippets.LABELENCODING, msg.label, msg.col_names, labelencoding_column_name)
            : "";

        const onehotencoding = onehotencoding_requirement
            ? util.format(snippets.ONEHOTNCODING, msg.label, msg.col_names, onehotencoding_column_name)
            : "";

        const featurescaling = feature_scaling_requirement
            ? (feature_scaling === "normalization"
                ? util.format(snippets.NORMALIZATION)
                : util.format(snippets.STANDARDLIZATION))
            : "";

        const datareshape = data_reshape === "1D"
            ? util.format(snippets.DATA_RESHAPE1D)
            : util.format(snippets.DATA_RESHAPE2D, channel, height, width, channel, height, width);

            return {
                script: util.format(snippets.DATAPROCESS, fill_na, labelencoding, onehotencoding, featurescaling, datareshape),
                fill_na,
                labelencoding,
                onehotencoding,
                featurescaling,
                datareshape
            };
    }

    RED.nodes.registerType("data process", Dataprocedures);

    RED.httpAdmin.get("/dataprocess/:id", RED.auth.needsPermission('dataprocess.read'), function(req, res) {
        const path = req.query.path;

        if (fs.existsSync(path)) {
            fs.readFile(path, 'utf8', function(err, data) {
                if (err) {
                    res.status(500).send("Error reading the file.");
                    return;
                }
                
                const columns = parseCSVHeaders(data);
                res.json({ columns: columns });
            });
        } else {
            res.status(500).send("File not found.");
        }
    });
    
    function parseCSVHeaders(data) {
        return data.split('\n')[0].split(',');
    }
}
