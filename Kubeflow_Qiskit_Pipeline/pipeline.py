import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def show_results(qnn : str) -> None:
    

    print(qnn)

@dsl.pipeline(name='First Pipeline', description='Applies Qnn for classification problem.')
def first_pipeline():

    # Loads the yaml manifest for each component
    download = kfp.components.load_component_from_file('download_data/download_data.yaml')
    qnn = kfp.components.load_component_from_file('qnn/qnn.yaml')

    # Run download_data task
    download_task = download()

    # the output generated by "download_task".
    qnn_task = qnn(download_task.output)

    
    # the component "show_results" is called to print the results.
    show_results(str(qnn_task.output))



if __name__ == '__main__':
    kfp.compiler.Compiler().compile(first_pipeline, 'qnnPipeline.yaml')
    # kfp.Client().create_run_from_pipeline_func(basic_pipeline, arguments={})
